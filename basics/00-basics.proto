/*
    Scalar Types:
        - Numbers: 
            - Keyword: 
                - int32, int64, sint32, sint64
                - uint32, uint64
                - fixed32, fixed64, sfixed32, sfixed64
                - float, double
            - Default Value: 
                - '0' for all.
        
        - Boolean: 
            - Keyword:
                - bool
            - Default Value:
                - false 
        
        - String:
            - Keyword:
                - string
            - Default Value: 
                - empty string
            -Note! : strings only acceps UTF-8 encoded strings or 7bit ASCII encoded strings

        - Bytes:
            - Keyword:
                - bytes
            - Default Value:
                - empty bytes
            -Note: Up to you interpret in code
*/

/*
    when a field not set : 
        - a field will not be serialized
        - populated with default value
*/

/*
    TAGS : 
        - field names are not important for serialization, TAGS are!
    
        Syntax:
            <type> <field_name> = <tag>;

        The Rules:
            - Smallest tag: 1
            - Largest tag:  536,870,911
            - Reserved tags: 19000 to 19999

        Important note : 
            - Payload is affected by the tags, it means: 
                - tags are serialized as variants
                - if the tag is a number from 1 to 15, it will be 1 byte long
                -  1:15 > 1 byte
                -  16:2047 > 2bytes
                - ...

            - you need to keep smallest tag numbers for the most populated fields in your schema !!!!!!
*/


/*
    REPEATED FIELDS:
        - repeated fields are just lists
        - syntax:
            - repeated <type> <field_name> = <tag>;
        - value: any number of elements (0 or more)
        - default value : empty list

*/

/*
    ENUMS:
        - Keyword:           enum
        - Default Value:     first value

        - important note:
            - first tag of an enum should be zero
*/